---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This template creates the customer VPC and all the resources
  needed to connect this VPC with the ROSA VPC.

Parameters:
  RosaStackName:
    Description: >
      Name of the stack that deployed the AWS infrastructure
      for the ROSA cluster.
    Type: String
  pCustomerVpcCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.2.0.0/16
    Description: Customer VPC CIDR block (10.2.0.0/16 for example).
    Type: String
  pCustomerVpcPrivateSubnetACidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.2.0.0/24
    Description: >
      CIDR block for the private subnet in first AZ of the customer VPC
      (10.2.0.0/24 for example).
    Type: String
  pCustomerVpcPrivateSubnetBCidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.2.1.0/24
    Description: >
      CIDR block for the private subnet in second AZ of the customer VPC
      (10.2.1.0/24 for example).
    Type: String
  pCustomerVpcPublicSubnetACidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.2.2.0/24
    Description: >
      CIDR block for the public subnet in the customer VPC
      (10.2.2.0/24 for example).
    Type: String
  pInstanceType:
    Default: "t3.medium"
    Description: EC2 instance type.
    Type: String
  pSshLocation:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "0.0.0.0/0"
    Description: The IP address range that can SSH to the EC2 instance.
    Type: String
  pRdpLocation:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: "0.0.0.0/0"
    Description: The IP address range that can use RDP to the EC2 instance.
    Type: String

Mappings:
  RegionMap:
    ap-south-1:
      ami: ami-061183ad486d5dd8a
    eu-north-1:
      ami: ami-03a2ff446d5bf5187
    eu-west-3:
      ami: ami-06e90f3404ebc4277
    eu-west-2:
      ami: ami-0ef262972e641bb3e
    eu-west-1:
      ami: ami-0ac03fb170870f7c7
    ap-northeast-3:
      ami: ami-01d7109b399c6b223
    ap-northeast-2:
      ami: ami-06b9122710049dfe7
    ap-northeast-1:
      ami: ami-0d5142f63c808d143
    ca-central-1:
      ami: ami-04609b5b156500b17
    sa-east-1:
      ami: ami-0b123273fd25fe833
    ap-southeast-1:
      ami: ami-0fcd2e9ac9a168217
    ap-southeast-2:
      ami: ami-09fb3a51968a858cd
    eu-central-1:
      ami: ami-0087bd2f5c26af5ca
    us-east-1:
      ami: ami-005b11f8b84489615
    us-east-2:
      ami: ami-08778753ef37aa408
    us-west-1:
      ami: ami-0267fc24ee0102728
    us-west-2:
      ami: ami-081aaface2871d0d0

Resources:
  # Customer VPC
  rCustomerVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: pCustomerVpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-customer-vpc-bastion"
        - Key: "redhattraining:course-sku"
          Value: CS220-customerVpc
  # Modify default vpc nacl to deny all inbound
  rInboundNetworkACLRule1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Fn::GetAtt:
          - rCustomerVpc
          - DefaultNetworkAcl
      RuleNumber: 60
      Protocol: -1
      RuleAction: deny
      CidrBlock: 0.0.0.0/0

  # Private subnets in the customer VPC
  rCustomerVpcPrivateSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: rCustomerVpc
    Properties:
      VpcId:
        Ref: rCustomerVpc
      CidrBlock:
        Ref: pCustomerVpcPrivateSubnetACidrBlock
      # Uses the first AZ available
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-customer-private-subnet-a"
        - Key: "redhattraining:course-sku"
          Value: CS220-customerVpc
  # # Private subnet in second AZ. Used later to create db subnetgroup
  # rCustomerVpcPrivateSubnetB:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: rCustomerVpc
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpc
  #     CidrBlock:
  #       Ref: pCustomerVpcPrivateSubnetBCidrBlock
  #     # Uses the second AZ available
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 1
  #         - Fn::GetAZs: ""
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-private-subnet-b"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc

  # New nacl for private subnet
  rNetworkAclCustomerVpcPrivateSubnet:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: rCustomerVpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-nacl-customer-private-subnet"
        - Key: "redhattraining:course-sku"
          Value: CS220-customerVpc
  rNetworkAclAssociationCustomerVpcPrivateSubnet:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
      - rCustomerVpcPrivateSubnetA
      - rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      SubnetId:
        Ref: rCustomerVpcPrivateSubnetA
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
  # Allow outbound access to allow download of oc cli
  rCustomerVpcPrivateSubnetAOutboundNetworkAclRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
      RuleNumber: 50
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  rCustomerVpcPrivateSubnetAOutboundNetworkAclRule2:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
      RuleNumber: 51
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  # Allow outbound access to ROSA cluster
  rCustomerVpcPrivateSubnetAOutboundNetworkAclRule3:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
      RuleNumber: 52
      Protocol: 6
      Egress: true
      RuleAction: allow
      CidrBlock:
        Fn::ImportValue: !Join [":", [!Ref RosaStackName, RosaVpcCidr]]
      PortRange:
        From: 6443
        To: 6443
  rCustomerVpcPrivateSubnetAInboundNetworkAclRule1:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
      RuleNumber: 50
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  # Allow Inbound access from ROSA cluster via tg
  rCustomerVpcPrivateSubnetAInboundNetworkAclRule2:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
      RuleNumber: 51
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: pCustomerVpcCidrBlock
      PortRange:
        From: 80
        To: 80
  rCustomerVpcPrivateSubnetAInboundNetworkAclRule3:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: rNetworkAclCustomerVpcPrivateSubnet
    Properties:
      NetworkAclId:
        Ref: rNetworkAclCustomerVpcPrivateSubnet
      RuleNumber: 52
      Protocol: 6
      RuleAction: allow
      CidrBlock:
        Ref: pCustomerVpcCidrBlock
      PortRange:
        From: 443
        To: 443

  # Customer VPC private subnet route table
  rCustomerVpcPrivateRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: rCustomerVpc
    Properties:
      VpcId:
        Ref: rCustomerVpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-customer-private-rt"
        - Key: "redhattraining:course-sku"
          Value: CS220-customerVpc
  rCustomerVpcPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - rCustomerVpcPrivateSubnetA
      - rCustomerVpcPrivateRouteTable
    Properties:
      SubnetId:
        Ref: rCustomerVpcPrivateSubnetA
      RouteTableId:
        Ref: rCustomerVpcPrivateRouteTable

  # Create the Transit Gateway Attachment to connect customer VPC with TGW
  rCustomerVpcTransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      SubnetIds:
        - !Ref rCustomerVpcPrivateSubnetA
      TransitGatewayId:
        Fn::ImportValue:
          !Join [":", [!Ref RosaStackName, TransitGateway]]
      VpcId: !Ref rCustomerVpc
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-twg-customer-vpc-attachment"
        - Key: "redhattraining:course-sku"
          Value: CS220-customerVpc
  # Transit gateway route table (customer)
  rTransitGatewayCustomerRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId:
        Fn::ImportValue:
          !Join [":", [!Ref RosaStackName, TransitGateway]]
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ""
              - - Fn::ImportValue:
                    !Join [":", [!Ref RosaStackName, RosaClusterName]]
                - "-twg-customer-vpc-rt"
        - Key: "redhattraining:course-sku"
          Value: CS220-customerVpc
  rTransitGatewayCustomerRouteTableAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId:
        Ref: rCustomerVpcTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayCustomerRouteTable

  rCustomerTransitGatewayRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock:
        Ref: pCustomerVpcCidrBlock
      TransitGatewayAttachmentId:
        Ref: rCustomerVpcTransitGatewayAttachment
      TransitGatewayRouteTableId:
        Fn::ImportValue:
          !Join [":", [!Ref RosaStackName, TransitGatewayRosaRouteTable]]
  rPropagateRosaVPCRoute:
    Type: AWS::EC2::TransitGatewayRouteTablePropagation
    Properties:
      TransitGatewayAttachmentId:
        Fn::ImportValue:
          !Join [":", [!Ref RosaStackName, TransitGatewayRosaAttachment]]
      TransitGatewayRouteTableId:
        Ref: rTransitGatewayCustomerRouteTable

  # Traffic between Customer VPC private subnet and ROSA VPC subnet
  rCustomerPrivateToRosaRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: rCustomerVpcPrivateRouteTable
      DestinationCidrBlock:
        Fn::ImportValue: !Join [":", [!Ref RosaStackName, RosaVpcCidr]]
      TransitGatewayId:
        Fn::ImportValue: !Join [":", [!Ref RosaStackName, TransitGateway]]

  # # Public subnet in the customer VPC
  # rCustomerVpcPublicSubnet:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: rCustomerVpc
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpc
  #     CidrBlock:
  #       Ref: pCustomerVpcPublicSubnetACidrBlock
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 0
  #         - Fn::GetAZs: ""
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-public-subnet"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  # # New nacl for public subnet
  # rNetworkAclCustomerVpcPublicSubnet:
  #   Type: AWS::EC2::NetworkAcl
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpc
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-nacl-customer-public-subnet"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  # rNetworkAclAssociationCustomerVpcPublicSubnet:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   DependsOn:
  #     - rCustomerVpcPublicSubnet
  #     - rNetworkAclCustomerVpcPublicSubnet
  #   Properties:
  #     SubnetId:
  #       Ref: rCustomerVpcPublicSubnet
  #     NetworkAclId:
  #       Ref: rNetworkAclCustomerVpcPublicSubnet
  # rCustomerVpcPublicSubnetOutboundNetworkAclRule1:
  #   Type: AWS::EC2::NetworkAclEntry
  #   DependsOn: rNetworkAclCustomerVpcPublicSubnet
  #   Properties:
  #     NetworkAclId:
  #       Ref: rNetworkAclCustomerVpcPublicSubnet
  #     RuleNumber: 50
  #     Protocol: 6
  #     Egress: true
  #     RuleAction: allow
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 0
  #       To: 65535
  # rCustomerVpcPublicSubnetInboundNetworkAclRule1:
  #   Type: AWS::EC2::NetworkAclEntry
  #   DependsOn: rNetworkAclCustomerVpcPublicSubnet
  #   Properties:
  #     NetworkAclId:
  #       Ref: rNetworkAclCustomerVpcPublicSubnet
  #     RuleNumber: 50
  #     Protocol: 6
  #     RuleAction: allow
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 0
  #       To: 65535

  # # Internet gateway
  # rInternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-igw"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  # rInternetGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   DependsOn: rCustomerVpc
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpc
  #     InternetGatewayId:
  #       Ref: rInternetGateway

  # # NAT gateway
  # rElasticIP:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-public-nat-eip"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  # rNATGateway:
  #   Type: AWS::EC2::NatGateway
  #   DependsOn: rElasticIP
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #         - rElasticIP
  #         - AllocationId
  #     SubnetId:
  #       Ref: rCustomerVpcPublicSubnet
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-public-nat"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc


  # # Route from the private subnet to NAT gateway for Internet
  # rCustomerPrivateRoute1:
  #   Type: AWS::EC2::Route
  #   DependsOn: rCustomerVpcPrivateRouteTable
  #   Properties:
  #     RouteTableId:
  #       Ref: rCustomerVpcPrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId:
  #       Ref: rNATGateway

  # # Customer VPC public subnet route table
  # rCustomerVpcPublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   DependsOn: rCustomerVpc
  #   Properties:
  #     VpcId:
  #       Ref: rCustomerVpc
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-customer-public-rt"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  # rCustomerPublicSubnetARouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   DependsOn:
  #     - rCustomerVpcPublicSubnet
  #     - rCustomerVpcPublicRouteTable
  #   Properties:
  #     SubnetId:
  #       Ref: rCustomerVpcPublicSubnet
  #     RouteTableId:
  #       Ref: rCustomerVpcPublicRouteTable
  # # Route from the public subnet to NAT gateway for Internet
  # rCustomerPublicRoute1:
  #   Type: AWS::EC2::Route
  #   DependsOn: rCustomerVpcPublicRouteTable
  #   Properties:
  #     RouteTableId:
  #       Ref: rCustomerVpcPublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId:
  #       Ref: rInternetGateway

  # # Security Group for bastion
  # rSecurityGroupBastion:
  #   Type: AWS::EC2::SecurityGroup
  #   DependsOn: rCustomerVpc
  #   Properties:
  #     GroupDescription: Enable SSH and RDP access
  #     GroupName: Bastion Host Security Group
  #     VpcId: !Ref rCustomerVpc
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-bastion-sg"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  #     SecurityGroupIngress:
  #       - CidrIp: !Ref pSshLocation
  #         FromPort: 22
  #         ToPort: 22
  #         IpProtocol: tcp
  #       - CidrIp: !Ref pRdpLocation
  #         FromPort: 3389
  #         ToPort: 3389
  #         IpProtocol: tcp

  # # Bastion EC2 instance
  # rBastionHost:
  #   Type: AWS::EC2::Instance
  #   DependsOn:
  #     - rSecurityGroupBastion
  #     - rCustomerVpcPrivateSubnetA
  #   Properties:
  #     InstanceType: !Ref pInstanceType
  #     ImageId: !FindInMap
  #       - RegionMap
  #       - !Ref "AWS::Region"
  #       - ami
  #     NetworkInterfaces:
  #       - GroupSet:
  #           - !Ref rSecurityGroupBastion
  #         AssociatePublicIpAddress: false
  #         DeviceIndex: 0
  #         DeleteOnTermination: true
  #         SubnetId: !Ref rCustomerVpcPrivateSubnetA
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-bastion-instance"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc

  # # Security Group for rds
  # rSecurityGroupDatabase:
  #   Type: AWS::EC2::SecurityGroup
  #   DependsOn: rCustomerVpc
  #   Properties:
  #     GroupDescription: Enable mysql connectivity to Rosa cluster
  #     GroupName: Database Security Group
  #     VpcId: !Ref rCustomerVpc
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-database-sg"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc
  #     SecurityGroupIngress:
  #       - CidrIp:
  #           Fn::ImportValue: !Join [":", [!Ref RosaStackName, RosaVpcCidr]]
  #         FromPort: 3306
  #         ToPort: 3306
  #         IpProtocol: tcp
  #     SecurityGroupEgress:
  #       - CidrIp:
  #           Fn::ImportValue: !Join [":", [!Ref RosaStackName, RosaVpcCidr]]
  #         FromPort: 1024
  #         ToPort: 65535
  #         IpProtocol: tcp

  # # Database subnet group
  # rRdsDBSubnetGroup:
  #   Type: "AWS::RDS::DBSubnetGroup"
  #   Properties:
  #     DBSubnetGroupName: testdbsubnetgroup
  #     DBSubnetGroupDescription: custom db subnet group
  #     SubnetIds:
  #       - !Ref rCustomerVpcPrivateSubnetA
  #       - !Ref rCustomerVpcPrivateSubnetB
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-db-subnetgroup"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc

  # # RDS mysql instance. Application on Rosa will connect to it.
  # rRdsInstance:
  #   Type: "AWS::RDS::DBInstance"
  #   Properties:
  #     DBInstanceClass: db.t3.micro
  #     MultiAZ: false
  #     AvailabilityZone:
  #       Fn::Select:
  #         - 0
  #         - Fn::GetAZs: ""
  #     Engine: mysql
  #     EngineVersion: 8.0.33
  #     MasterUsername: admin
  #     MasterUserPassword: redhat123
  #     Port: "3306"
  #     DBInstanceIdentifier: rds-mysql
  #     AllocatedStorage: "20"
  #     DBName: quotesdb
  #     StorageEncrypted: false
  #     StorageType: standard
  #     BackupRetentionPeriod: 1
  #     DeleteAutomatedBackups: true
  #     DeletionProtection: false
  #     DBSubnetGroupName:
  #       Ref: rRdsDBSubnetGroup
  #     VPCSecurityGroups:
  #       - !Ref rSecurityGroupDatabase
  #     Tags:
  #       - Key: Name
  #         Value:
  #           Fn::Join:
  #             - ""
  #             - - Fn::ImportValue:
  #                   !Join [":", [!Ref RosaStackName, RosaClusterName]]
  #               - "-database-instance"
  #       - Key: "redhattraining:course-sku"
  #         Value: CS220-customerVpc

Outputs:
  oCustomerVPC:
    Description: Customer VPC
    Value: !Ref rCustomerVpc
    Export:
      Name: !Sub "${AWS::StackName}-CustomerVPC"
  oInboundNetworkACLRule1:
    Description: NACL rule to deny all inbound traffic in customer VPC
    Value: !Ref rInboundNetworkACLRule1
  oCustomerVPCPrivateSubnetA:
    Description: Customer VPC Private Subnet in first AZ
    Value: !Ref rCustomerVpcPrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-CustomerVPCPrivateSubnetA"
  oNetworkAclCustomerVpcPrivateSubnet:
    Description: Nacl for private subnet in customer vpc
    Value: !Ref rNetworkAclCustomerVpcPrivateSubnet
  oCustomerVPCPrivateRouteTable:
    Description: Route Table for Customer VPC Private Subnet
    Value: !Ref rCustomerVpcPrivateRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-CustomerVPCPrivateRouteTable"
